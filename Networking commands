ip link
ip addr 192.168.1.10/24 dev eth0

route

ip route add 192.168.2.0/24 via 192.168.1.1

cat /proc/sys/net/ipv4/ip_forward

cat >> /etc/hosts #for DNS entreis

cat >> /etc/resolv.conf

#network namespaces
#connecting 2 namespaces
ip netns exec red ip link
ip -n red link
arp

ip link add veth-red type veth peer name veth-blue
ip link set veth-red netns red
ip link set veth-blue netns blue

ip -n red addr add 192.168.15.1 dev veth-red
ip -n blue addr add 192.168.15.2 dev veth-blue

ip -n red link set veth-red up
ip -n blue link set veth-blue up

ip netns exec red ping 192.168.15.2
ip netns exec red arp
ip netns exec blue rp
arp

#connecting multiple NS
ip link add v-net-0 type bridge
ip link
ip link set dev v-net-0 up

ip link add veth-red type veth peer name veth-red-bridge
ip link add veth-blue type veth peer name veth-blue-bridge

ip link set veth-red netns red
ip link set veth-red-br master v-net-0
ip link set veth-blue netns blue
ip link set veth-blue-br master v-net-0

ip -n red addr 192.168.15.1 dev veth-red
ip -n blue addr add 192.168..15.2 dev veth-blue
ip -n red link set veth-red up
ip -n blue link set veth-blue up

ip netns exec blue ip route add 192.168.1.0/24 via 192.168.15.5
iptables -t nat -A POSTROUTING -s 192.168.15.0/24 -j MASQUERADE
ip netns exec blue ping 192.168.1.3

#reaching internet
ip netns exec blue ping 8.8.8.8
ip netns exec blue route
ip netns exec blue ping 8.8.8.8

iptables -t nat -A PREROUTING --dport 80 --to-destination 192.168.15.2:80 -j DNAT

##Start of docker
docker network ls
ip link

ip addr
ip netns


